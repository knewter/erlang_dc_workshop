%section
  %h1 Supervisors
  %h2.fragment Let It Crash!
  %aside.notes
    :markdown
      Now we're going to talk about a core concept in building systems in the Elixir
      Way - "Let it crash." [advance]

      That is, don't concern yourself with keeping your code
      from crashing, just make sure that the system keeps running if something bad
      happens.

      The way you manage this is by designing your system composed of multiple
      processes, managed by supervisors.

      A supervisor exists to manage processes or other supervisors.  There are various
      strategies defined in OTP to determine what to do when a child crashes, and
      there are ways to handle repeated failures of supervised processes.

      Let's look at a project to supervise a ListServer so that it can live through a
      crash.
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      So we're going to start out by building a very basic server to manage a list.

          mix new supervised_list_server
          cd supervised_list_server

      Let's write a quickie test for the server.  We'll open up
      `test/list_server_test.exs`:

          defmodule ListServerTest do
            use ExUnit.Case

            # Clear the ListServer before each test
            setup do
              ListServer.start_link
              ListServer.clear
            end

            test "it starts out empty" do
              assert ListServer.items == []
            end

            test "it lets us add things to the list" do
              ListServer.add "book"
              assert ListServer.items == ["book"]
            end

            test "it lets us remove things from the list" do
              ListServer.add "book"
              ListServer.add "magazine"
              ListServer.remove "book"
              assert ListServer.items == ["magazine"]
            end
          end

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown

      When we run the tests now, they'll fail because there's no ListServer module.
      Let's get started.  We'll open up `lib/list_server.ex` and add a basic
      ListServer.  It should all make sense - it's nothing we haven't seen before.

          defmodule ListServer do
            use GenServer.Behaviour

            ### Public API
            def start_link do
              :gen_server.start_link({:local, :list}, __MODULE__, [], [])
            end

            def clear do
              :gen_server.cast :list, :clear
            end

            def add(item) do
              :gen_server.cast :list, {:add, item}
            end

            def remove(item) do
              :gen_server.cast :list, {:remove, item}
            end

            def items do
              :gen_server.call :list, :items
            end

            ### GenServer API
            def init(list) do
              {:ok, list}
            end

            # Clear the list
            def handle_cast(:clear, list) do
              {:noreply, []}
            end
            def handle_cast({:add, item}, list) do
              {:noreply, list ++ [item]}
            end
            def handle_cast({:remove, item}, list) do
              {:noreply, List.delete(list, item)}
            end

            def handle_call(:items, _from, list) do
              {:reply, list, list}
            end
          end

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      Alright, if we run the tests now they'll pass.  Now let's add a misfeature - a
      bug.  We'll add a feature whose whole job is to crash the ListServer.  Add the
      following:

          def crash do
            :gen_server.cast :list, :crash
          end

          #...

          def handle_cast(:crash, list) do
            1 = 2
          end

      To verify that this causes a crash, let's open up an `iex` session and see it
      happen:

          iex -S mix

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      Now start a ListServer, add some items, remove some items, list them, and then
      cause a crash.  Try to list them after crashing it:

          ListServer.start_link
          ListServer.add "book"
          ListServer.items
          ListServer.add "cane"
          ListServer.items
          ListServer.remove "cane"
          ListServer.items
          ListServer.crash
          ListServer.items

      OK, so once we've crashed, we can't use it any more.  This sucks, because Erlang
      and Elixir systems are supposed to be fault-tolerant, and here we made something
      crash and it didn't tolerate it.  But of course, that's because we haven't
      finished building a proper system.  This is where OTP's supervisors come in.
      Let's go ahead and add a supervisor.

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown

      Open up `lib/list_supervisor.ex` and add the following:

          defmodule ListSupervisor do
            use Supervisor.Behaviour

            def start_link do
              :supervisor.start_link(__MODULE__, [])
            end

            def init(list) do
              child_processes = [ worker(ListServer, list) ]
              supervise child_processes, strategy: :one_for_one
            end
          end

      Now open up `iex -S mix` and try something very similar to what you did before...
      the only difference is that we use the ListSupervisor to start the List:

          ListSupervisor.start_link
          ListServer.add "book"
          ListServer.items
          ListServer.add "cane"
          ListServer.items
          ListServer.remove "cane"
          ListServer.items
          ListServer.crash
          ListServer.items

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown

      The last item was different - after crashing, we still had a list server!  It
      just didn't have the state from before the crash.  This is the essence of
      Supervision.  However, the downside here is we really want our actor to keep his
      state if he crashes, but that's impossible since it's stored in the process.
      The solution to this is to store the actual important bits of state in an
      external process and make sure it does very little, so that it cannot crash.

%section
  %h1 Persistent State
  .fragment
    :markdown
      ![Supervision Tree](./images/supervision_tree.png)

  %aside.notes
    :markdown
      In order to persist the data, and to make sure all of these processes start
      together as they should, we're going to build a slightly more complex
      supervision tree.  I learned how this should work from Dave Thomas' book, by the
      way.  Let's go ahead and have a look at what it'll look like. [advance]

      Here, you can see we're going to have a top level supervisor, who starts a
      process to store the ListData in, and supervises a SubSupervisor, who's
      responsible for the ListServer itself.  The ListServer will get access to the
      ListData pid on initialization, and he'll ask ListData for the data every time
      he needs to access it.  This way, when ListServer crashes, his data's safe and
      sound.

%section
  %h1 LIVE CODING ZOMG
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown
      Alright, now that we know what we're trying to do, let's implement it.  Open up
      `lib/list_supervisor.ex` and make it look like the following:

          defmodule ListSupervisor do
            use Supervisor.Behaviour

            def start_link do
              {:ok, sup} = :supervisor.start_link(__MODULE__, [])
              start_workers(sup)
              {:ok, sup}
            end

            def start_workers(sup) do
              # Start the ListData worker
              {:ok, list_data} = :supervisor.start_child(sup, worker(ListData, []))

              # Now start the SubSupervisor for the actual ListServer
              :supervisor.start_child(sup, worker(ListSubSupervisor, [list_data]))
            end

            def init(_) do
              supervise [], strategy: :one_for_one
            end
          end

%section
  %h1 LIVE CODING ZOMG
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown

      Here, we need to get the pid of the ListData worker, and pass that on to the
      ListSubSupervisor, so we had to manage starting the children of the supervisor
      ourselves, rather than allowing the call to `supervise` to handle it for us.
      Let's see what ListData is going to look like.  Open up `lib/list_data.ex`:

          defmodule ListData do
            use GenServer.Behaviour

            # Public API
            def start_link do
              :gen_server.start_link(__MODULE__, [], [])
            end

            def save_state(pid, state) do
              :gen_server.cast pid, {:save_state, state}
            end

            def get_state(pid) do
              :gen_server.call pid, :get_state
            end

            # GenServer API
            def init(list) do
              {:ok, list}
            end

            def handle_call(:get_state, _from, current_state) do
              {:reply, current_state, current_state}
            end

            def handle_cast({:save_state, new_state}, _current_state) do
              {:noreply, new_state}
            end
          end

%section
  %h1 LIVE CODING ZOMG
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown

      This is an extremely generic server that could be used for storing any arbitrary
      value and replacing it.  It'll work fine for our needs.  Let's move on to the
      ListSubSupervisor.  Open up `lib/list_sub_supervisor.ex`:

          defmodule ListSubSupervisor do
            use Supervisor.Behaviour

            def start_link(list_data_pid) do
              :supervisor.start_link(__MODULE__, list_data_pid)
            end

            def init(list_data_pid) do
              child_processes = [ worker(ListServer, [list_data_pid]) ]
              supervise child_processes, strategy: :one_for_one
            end
          end

%section
  %h1 LIVE CODING ZOMG
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown

      This is extremely basic - it just tracks the list data pid, and passes it in to
      the ListServer when it restarts it.  Now we just need to modify the ListServer
      to both grab its state from the ListData server and to store it there when it
      crashes.  Open up `lib/list_server.ex`:

          defmodule ListServer do
            use GenServer.Behaviour

            ### Public API
            def start_link(list_data_pid) do
              :gen_server.start_link({:local, :list}, __MODULE__, list_data_pid, [])
            end

            def clear do
              :gen_server.cast :list, :clear
            end

            def add(item) do
              :gen_server.cast :list, {:add, item}
            end

            def remove(item) do
              :gen_server.cast :list, {:remove, item}
            end

            def items do
              :gen_server.call :list, :items
            end

            def crash do
              :gen_server.cast :list, :crash
            end

            ### GenServer API
            def init(list_data_pid) do
              list = ListData.get_state(list_data_pid)
              {:ok, {list, list_data_pid}}
            end

            # Clear the list
            def handle_cast(:clear, {list, list_data_pid}) do
              {:noreply, {[], list_data_pid}}
            end
            def handle_cast({:add, item}, {list, list_data_pid}) do
              {:noreply, {list ++ [item], list_data_pid}}
            end
            def handle_cast({:remove, item}, {list, list_data_pid}) do
              {:noreply, {List.delete(list, item), list_data_pid}}
            end
            def handle_cast(:crash, _state) do
              1 = 2
            end

            def handle_call(:items, _from, {list, list_data_pid}) do
              {:reply, list, {list, list_data_pid}}
            end

            # Handle termination
            def terminate(_reason, {list, list_data_pid}) do
              ListData.save_state list_data_pid, list
            end
          end
%section
  %h1 LIVE CODING ZOMG
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown
      So we had to tweak quite a few things, just to make sure we tracked the
      `list_data_pid` throughout the server, but other than that it was very minimal
      w/r/t changes.  Now let's see if we keep our state after a crash!  Run `iex -S
      mix`

          ListSupervisor.start_link
          ListServer.add "book"
          ListServer.items
          ListServer.add "cane"
          ListServer.items
          ListServer.remove "cane"
          ListServer.items
          ListServer.crash
          ListServer.items

      And that's it!  We retained state beyond a crash.  This is the power of
      supervision trees!

%section
  %h1 Supervisors
  %h2 Summary
  :markdown
    ![Supervision Tree](./images/supervision_tree.png)
  %aside.notes
    :markdown
      Alright, so in this section we covered what Supervision Behaviour was, how to
      use it to keep a server up, and how to leverage the Let It Crash philosophy to make
      sure our state survived a crash.  We also got a look at registering a server
      with an atom for a name.
%section
  %h1 Questions?
