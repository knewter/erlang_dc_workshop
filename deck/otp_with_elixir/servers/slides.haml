%section
  %h1 OTP with Elixir
  %ul
    %li.fragment Servers
    %li.fragment Finite State Machines
    %li.fragment GenEvent
    %li.fragment Supervisors
  %aside.notes
    :markdown
      Alright, so now we know the basics about how Elixir works and what its
      syntax looks like.  Now let's dig into using OTP with Elixir.

      First, let me just give a brief introduction to OTP.  It stands for the
      "Open Telephony Project" and it's part of the Erlang distribution.  It provides
      a means to build generic servers, [advance]

      state machines, [advance]

      event handlers, [advance]

      and supervision mechanisms.

      You really want to build your application to be OTP Compliant - this means
      that you have an entry point to your application that supervises the whole thing,
      and provides common and known interfaces for starting and interacting with the
      various pieces of your application.

      Let's get started. [advance]
%section
  %h1 GenServer
  %pre
    %code
      :preserve
        defmodule Something do
          use GenServer.Behaviour
        end
  %aside.notes
    :markdown
      We're going to start out looking at GenServer, which stands for "Generic
      Server."  It's a standardized implementation of the client/server model
      for sharing a resource.  Basically, it makes it pretty painless to share
      and manage access to a bit of state from multiple different processes,
      using message passing.

      We'll dig into it by building a project that uses it.  Let's get started.
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      We're going to implement a basic server to model a Fridge.  This concept
      is shamelessly ripped from the Learn You Some Erlang book, which I can't
      recommend enough.

      We'll start out by building a new project:

          mix new fridge_server

      Next, we'll make a basic test to describe the Fridge:

          defmodule FridgeServerTest do
            use ExUnit.Case

            setup do
              { :ok, fridge } = :gen_server.start_link FridgeServer.Server, [], []
              { :ok, [ server: fridge ] }
            end

            test "putting something into the fridge", meta do
              assert :ok == :gen_server.call(meta[:server], {:store, :bacon})
            end

            test "removing something from the fridge", meta do
              :gen_server.call(meta[:server], {:store, :bacon})
              assert {:ok, :bacon} == :gen_server.call(meta[:server], {:take, :bacon})
            end

            test "removing something from the fridge twice", meta do
              :gen_server.call(meta[:server], {:store, :bacon})
              assert {:ok, :bacon} == :gen_server.call(meta[:server], {:take, :bacon})
              assert :not_found == :gen_server.call(meta[:server], {:take, :bacon})
            end

            test "taking something from the fridge that isn't in there", meta do
              assert :not_found == :gen_server.call(meta[:server], {:take, :bacon})
            end
          end

      (talk through the test a bit as you go)
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      So let's go ahead and start implementing the server this test is looking for.
      We'll start out by generating a `lib/fridge_server/server.ex` file and putting a
      module named `FridgeServer.Server` in there.

          defmodule FridgeServer.Server do
          end

      Next, we'll go ahead and `use GenServer.Behaviour`.  That in itself is enough to
      start making our tests fail differently.  Now, they basically fail because the
      server never handles the call messages it's sent.  Let's give it a basic
      implementation of replying to those messages, so that the timeouts will stop:

          defmodule FridgeServer.Server do
            use GenServer.Behaviour

            def handle_call(_call, _from, state) do
              {:reply, :error, state}
            end
          end

      Running the tests now gives us instant feedback.  Let's implement the `:store`
      call by making it add the second element of the call to the server's state.
      We'll also rename 'state' to 'items' so that it's a bit more representative of
      what we're dealing with.  We'll replace the earlier `handle_call` entirely.

          def handle_call({:store, item}, _from, items) do
            {:reply, :ok, [item|items]}
          end

%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      This time when we ran the tests, we saw a more legitimate looking failure -
      basically, the call to `{:take, item}` wasn't matched by any `handle_call`
      function clause, and so the server crashed.  Let's go ahead and implement that
      call:

          def handle_call({:take, item}, _from, items) do
            {:reply, {:ok, item}, items}
          end

      Here, we've cheated a bit.  We just claim to have the item that's attempting to
      be taken out of the fridge, without even checking if it's available.  However,
      this is sufficient to pass the next test.  In order to pass the final two tests,
      we'll need to actually check for the item in the fridge and delete it when we
      take it.  Let's implement that.

          def handle_call({:take, item}, _from, items) do
            case Enum.member?(items, item) do
              true  -> {:reply, {:ok, item}, items}
              false -> {:reply, :not_found, items}
            end
          end
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      That supports the first part of the remaining two tests - replying appropriately
      if an item is not found.  The final test hinges on actually removing the taken
      item from the fridge.  Implementing that:

          def handle_call({:take, item}, _from, items) do
            case Enum.member?(items, item) do
              true  -> {:reply, {:ok, item}, List.delete(items, item)}
              false -> {:reply, :not_found, items}
            end
          end

      ## Prettying up our public interface
      Now, looking back at the tests, the interface for this thing is pretty
      miserable.  No one wants to be going through the `:gen_server` module directly
      to interact with their fridge.  Let's see what a nicer api might look like:

          {:ok, fridge} = FridgeServer.Server.start_link
          :ok = FridgeServer.Server.store(fridge, :bacon)
          {:ok, bacon} = FridgeServer.Server.take(fridge, :bacon)
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      We'll copy the existing test,

          cp test/fridge_server_test.exs test/fridge_server_nicer_interface_test.exs

      and rewrite it to use this interface.

          defmodule FridgeServerNicerInterfaceTest do
            use ExUnit.Case

            setup do
              { :ok, fridge } = FridgeServer.Server.start_link
              { :ok, [ server: fridge ] }
            end

            test "putting something into the fridge", meta do
              assert :ok == FridgeServer.Server.store(meta[:server], :bacon)
            end

            test "removing something from the fridge", meta do
              FridgeServer.Server.store(meta[:server], :bacon)
              assert {:ok, :bacon} == FridgeServer.Server.take(meta[:server], :bacon)
            end

            test "removing something from the fridge twice", meta do
              FridgeServer.Server.store(meta[:server], :bacon)
              assert {:ok, :bacon} == FridgeServer.Server.take(meta[:server], :bacon)
              assert :not_found == FridgeServer.Server.take(meta[:server], :bacon)
            end

            test "taking something from the fridge that isn't in there", meta do
              assert :not_found == FridgeServer.Server.take(meta[:server], :bacon)
            end
          end
%section
  %h1 LIVE LIVE LIVE LIVE LIVE
  %h1 CODING CODING CODING
  %h1 ZOMG ZOMG ZOMG ZOMG
  %aside.notes
    :markdown
      Now, to implement this interface we just need to write three simple functions:

          # Public API
          def start_link do
            :gen_server.start_link(__MODULE__, [], [])
          end

          def store(server, item) do
            :gen_server.call(server, {:store, item})
          end

          def take(server, item) do
            :gen_server.call(server, {:take, item})
          end

      Run the tests, and all should be well.
%section
  %h1 GenServer
  %h2 Summary
  %aside.notes
    :markdown
      Alright, so that's a quick overview of OTP Servers in Elixir. [advance]
%section
  %h1 Questions?
